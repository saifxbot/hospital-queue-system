"""Add user_id field for unique login identifiers

Revision ID: 9d4974bf7c76
Revises: c85adeb053b2
Create Date: 2025-07-20 20:51:46.212166

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9d4974bf7c76'
down_revision = 'c85adeb053b2'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        # First add the column as nullable
        batch_op.add_column(sa.Column('user_id', sa.String(length=20), nullable=True))
    
    # Populate existing user_ids based on username
    connection = op.get_bind()
    result = connection.execute(sa.text("SELECT id, username FROM user"))
    users = result.fetchall()
    
    for user in users:
        user_id = f"USER{user[0]:04d}"  # Generate USER0001, USER0002, etc.
        connection.execute(
            sa.text("UPDATE user SET user_id = :user_id WHERE id = :id"),
            {"user_id": user_id, "id": user[0]}
        )
    
    # Now make the column non-nullable and add unique constraint
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('user_id', nullable=False)
        batch_op.create_unique_constraint('uq_user_user_id', ['user_id'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_constraint('uq_user_user_id', type_='unique')
        batch_op.drop_column('user_id')

    # ### end Alembic commands ###
